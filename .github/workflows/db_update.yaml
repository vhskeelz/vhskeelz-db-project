name: DB update
on:
  workflow_dispatch:
    inputs:
      skip_db_update:
        type: boolean
        required: false
        default: false
        description: "Skip the DB update?"
      skip_update_smoove:
        type: boolean
        required: false
        default: false
        description: "Skip the update smoove?"
      skip_update_sender:
        type: boolean
        required: false
        default: false
        description: "Skip the update sender?"
      skip_update_salesforce:
        type: boolean
        required: false
        default: false
        description: "Skip the update salesforce?"
      skip_send_mailings:
        type: boolean
        required: false
        default: false
        description: "Skip the send mailings?"
  schedule:
    # Every 4 hours
    - cron: '22 */4 * * *'
env:
  PROCESSING_RECORD_ENABLED: "true"
  PROCESSING_RECORD_ID: ${{ github.run_id }}
  SERVICE_ACCOUNT_FILE: service_account.json
  SKIP_DB_UPDATE: ${{ inputs.skip_db_update || 'false' }}
  SKIP_UPDATE_SMOOVE: ${{ inputs.skip_update_smoove || 'false' }}
  SKIP_UPDATE_SENDER: ${{ inputs.skip_update_sender || 'false' }}
  SKIP_UPDATE_SALESFORCE: ${{ inputs.skip_update_salesforce || 'false' }}
  SKIP_SEND_MAILINGS: ${{ inputs.skip_send_mailings || 'false' }}
jobs:
  db_update:
    concurrency:
      group: db-update
    runs-on: ubuntu-22.04
    steps:
      - name: checkout
        uses: actions/checkout@v3
        if: env.SKIP_DB_UPDATE != 'true'
      - name: setup vhskeelz-db
        uses: ./.github/actions/setup-vhskeelz-db
        with:
          selenium: "true"
          service_account_b64: ${{ secrets.SERVICE_ACCOUNT_B64 }}
        if: env.SKIP_DB_UPDATE != 'true'
      - name: run load_data
        env:
          PROCESSING_RECORD_NAME: ${{ github.event_name }}-github_db_update-load-data
          PROCESSING_RECORD_CONTEXT_IGNORE_EXCEPTIONS_IF_RECENT_SUCCESS: "true"
          PROCESSING_RECORD_CONTEXT_IGNORE_EXCEPTIONS_IF_RECENT_SUCCESS_INTERVAL: "12 hour"
        run: xvfb-run poetry run vhskeelz-db load-data --extract
        if: env.SKIP_DB_UPDATE != 'true'
      - name: mock db update
        if: env.SKIP_DB_UPDATE == 'true'
        run: echo "mock db update"

  update_smoove:
    needs:
      - db_update
    concurrency:
      group: update-smoove
    runs-on: ubuntu-22.04
    steps:
      - name: checkout
        uses: actions/checkout@v3
        if: env.SKIP_UPDATE_SMOOVE != 'true'
      - name: setup vhskeelz-db
        uses: ./.github/actions/setup-vhskeelz-db
        with:
          selenium: "false"
          service_account_b64: ${{ secrets.SERVICE_ACCOUNT_B64 }}
        if: env.SKIP_UPDATE_SMOOVE != 'true'
      - name: run update-smoove-candidates-mailing-list
        env:
          PROCESSING_RECORD_NAME: ${{ github.event_name }}-github_db_update-update-smoove-candidates-mailing-list
          PROCESSING_RECORD_CONTEXT_IGNORE_EXCEPTIONS_IF_RECENT_SUCCESS: "true"
        run: poetry run vhskeelz-db update-smoove-candidates-mailing-list
        if: env.SKIP_UPDATE_SMOOVE != 'true'
      - name: mock update smoove
        if: env.SKIP_UPDATE_SMOOVE == 'true'
        run: echo "mock update smoove"

  update_sender:
    needs:
      - db_update
    concurrency:
      group: update-sender
    runs-on: ubuntu-22.04
    steps:
      - name: checkout
        uses: actions/checkout@v3
        if: env.SKIP_UPDATE_SENDER != 'true'
      - name: setup vhskeelz-db
        uses: ./.github/actions/setup-vhskeelz-db
        with:
          selenium: "false"
          service_account_b64: ${{ secrets.SERVICE_ACCOUNT_B64 }}
        if: env.SKIP_UPDATE_SENDER != 'true'
      - name: run update-sender-candidates-mailing-list
        env:
          PROCESSING_RECORD_NAME: ${{ github.event_name }}-github_db_update-update-sender-candidates-mailing-list
        run: poetry run vhskeelz-db update-sender-candidates-mailing-list
        if: env.SKIP_UPDATE_SENDER != 'true'
      - name: mock update sender
        if: env.SKIP_UPDATE_SENDER == 'true'
        run: echo "mock update sender"

  update_salesforce:
    needs:
      - db_update
    concurrency:
      group: update-salesforce
    runs-on: ubuntu-22.04
    steps:
      - name: checkout
        uses: actions/checkout@v3
        if: env.SKIP_UPDATE_SALESFORCE != 'true'
      - name: setup vhskeelz-db
        uses: ./.github/actions/setup-vhskeelz-db
        with:
          selenium: "false"
          service_account_b64: ${{ secrets.SERVICE_ACCOUNT_B64 }}
        if: env.SKIP_UPDATE_SALESFORCE != 'true'
      - name: run update-salesforce-data
        env:
          PROCESSING_RECORD_NAME: ${{ github.event_name }}-github_db_update-update-salesforce-data
        run: poetry run vhskeelz-db update-salesforce-data
        if: env.SKIP_UPDATE_SALESFORCE != 'true'
      - name: mock update salesforce
        if: env.SKIP_UPDATE_SALESFORCE == 'true'
        run: echo "mock update salesforce"

  send_mailings:
    needs:
      - db_update
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        mailing_type:
        # - interested  # there is an error with selenium processing for this mailing type
        - new_position
        - num_fits
    concurrency:
      group: mailing_${{ matrix.mailing_type }}
    steps:
      - name: checkout
        uses: actions/checkout@v3
        if: env.SKIP_SEND_MAILINGS != 'true'
      - name: send mailing
        uses: ./.github/actions/send-candidate-offers-mailing
        if: env.SKIP_SEND_MAILINGS != 'true'
        with:
          run_args: "--test-email-to=default --test-email-update-db"
          no_dry_run: "DANGER"
          mailing_type: ${{ matrix.mailing_type }}
          service_account_b64: ${{ secrets.SERVICE_ACCOUNT_B64 }}
          processing_record_name: "${{ github.event_name }}-github_db_update-send-mailings-${{ matrix.mailing_type }}"
          processing_record_id: ${{ github.run_id }}
      - name: mock send mailings
        if: env.SKIP_SEND_MAILINGS == 'true'
        run: echo "mock send mailings - ${{ matrix.mailing_type }}"

  final:
    needs: [update_smoove, update_sender, update_salesforce, send_mailings]
    if: always()
    runs-on: ubuntu-22.04
    steps:
      - run: |
          if [ "${{ needs.update_smoove.result }}" != "success" ]; then
            echo "Update Smoove failed"
            exit 1
          fi
          if [ "${{ needs.update_sender.result }}" != "success" ]; then
            echo "Update Sender failed"
            exit 1
          fi
          if [ "${{ needs.update_salesforce.result }}" != "success" ]; then
              echo "Update Salesforce failed"
              exit 1
          fi
          if [ "${{ needs.send_mailings.result }}" != "success" ]; then
              echo "Send mailings failed"
              exit 1
          fi
          echo "All jobs succeeded"
